(**************************************************************)
(*   Copyright Dominique Larchey-Wendling [*]                 *)
(*                                                            *)
(*                             [*] Affiliation LORIA -- CNRS  *)
(**************************************************************)
(*      This file is distributed under the terms of the       *)
(*        Mozilla Public License Version 2.0, MPL-2.0         *)
(**************************************************************)

From Stdlib Require Import Ring ZArith Setoid Utf8.

Require Import utils.

Set Implicit Arguments.

(** Definition of a ring *)

Record ring := {
  carrier :> Type;
  un_a : carrier;
  op_a : carrier ‚Üí carrier ‚Üí carrier;
  iv_a : carrier ‚Üí carrier;
  un_m : carrier;
  op_m : carrier ‚Üí carrier ‚Üí carrier;
  req  : carrier ‚Üí carrier ‚Üí Prop;
  eq_equiv : Equivalence req;
  is_ring : @ring_theory carrier un_a un_m op_a op_m (Œª x y, op_a x (iv_a y)) iv_a req;
  eq_ext : @ring_eq_ext carrier op_a op_m iv_a req
}.

Arguments un_a {_}.
Arguments un_m {_}.
Arguments op_a {_}.
Arguments op_m {_}.
Arguments iv_a {_}.
Arguments req  {_}.

(** Generic notations for rings *)

Notation "0·µ£" := un_a.
Notation "1·µ£" := un_m.

Notation "x ‚àº·µ£ y" := (req x y) (at level 70, no associativity, format "x  ‚àº·µ£  y").
Notation "x +·µ£ y" := (op_a x y) (at level 31, left associativity, format "x  +·µ£  y").
Notation "-·µ£ x" := (iv_a x) (at level 25, right associativity, format "-·µ£ x").
Notation "x ‚àí·µ£ y" := (x +·µ£ -·µ£ y) (at level 31, left associativity, format "x  ‚àí·µ£  y").
Notation "x *·µ£ y" := (op_m x y) (at level 29, left associativity, format "x  *·µ£  y").

(** req/‚àº·µ£ is a equivalence relation, defining a setoid *)

Fact ring_eq_refl (ùì° : ring) (x : ùì°) : x ‚àº·µ£ x.
Proof. apply eq_equiv. Qed.

Fact ring_eq_sym (ùì° : ring) (x y : ùì°) : x ‚àº·µ£ y ‚Üí y ‚àº·µ£ x.
Proof. apply eq_equiv. Qed.

Fact ring_eq_trans (ùì° : ring) (x y z : ùì°) : x ‚àº·µ£ y ‚Üí y ‚àº·µ£ z ‚Üí x ‚àº·µ£ z.
Proof. apply eq_equiv. Qed.

Hint Resolve ring_eq_refl ring_eq_sym ring_eq_trans : core.

Add Parametric Relation (ùì° : ring) : ùì° req
    reflexivity proved by (ring_eq_refl _)
    symmetry proved by (ring_eq_sym _)
    transitivity proved by (ring_eq_trans _)
  as ring_eq_is_equivalence.

(** ring operations are morphisms wrt. req/‚àº·µ£ *)

Add Parametric Morphism (ùì° : ring) : (@op_a ùì°) with signature (req) ==> (req) ==> (req) as ring_op_a_morph.
Proof. apply eq_ext. Qed.

Add Parametric Morphism (ùì° : ring) : (@op_m ùì°) with signature (req) ==> (req) ==> (req) as ring_op_m_morph.
Proof. apply eq_ext. Qed.

Add Parametric Morphism (ùì° : ring) : (@iv_a ùì°) with signature (req) ==> (req) as ring_iv_a_morph.
Proof. apply eq_ext. Qed.

(** Some obvious derived equations for rings *)

Section ring_utils.

  Variable (ùì° : ring).

  Implicit Type (x : ùì°).

  Add Ring ùì°_is_ring : (is_ring ùì°).

  Fact ring_sub_a_id x : x ‚àí·µ£ x ‚àº·µ£ 0·µ£.
  Proof. ring. Qed.

  Fact ring_op_a_cancel x y z : x +·µ£ y ‚àº·µ£ x +·µ£ z ‚Üí y ‚àº·µ£ z.
  Proof.
    intros E.
    setoid_replace y with (x +·µ£ y ‚àí·µ£ x) by ring.
    rewrite E; ring.
  Qed.

  Fact ring_op_m_un_a x : x *·µ£ 0·µ£ ‚àº·µ£ 0·µ£.      Proof. ring. Qed.
  Fact ring_op_m_un_m x : x *·µ£ 1·µ£ ‚àº·µ£ x.       Proof. ring. Qed.
  Fact ring_op_a_un_a x : x +·µ£ 0·µ£ ‚àº·µ£ x.       Proof. ring. Qed.
  Fact ring_un_a_op_a x : 0·µ£ +·µ£ x ‚àº·µ£ x.       Proof. ring. Qed.

End ring_utils.

(** The notion of ring homorphism *)

Section ring_homo.

  Variables (ùì° ùìö : ring) (f : ùì° ‚Üí ùìö).

  Definition ring_homo :=
      (‚àÄ x y, x ‚àº·µ£ y ‚Üí f x ‚àº·µ£ f y)
    ‚àß (‚àÄ x y, f (x +·µ£ y) ‚àº·µ£ f x +·µ£ f y)
    ‚àß (‚àÄ x y, f (x *·µ£ y) ‚àº·µ£ f x *·µ£ f y)
    ‚àß f 1·µ£ ‚àº·µ£ 1·µ£.

  Add Ring ùì°_is_ring : (is_ring ùì°).
  Add Ring ùìö_is_ring : (is_ring ùìö).

  Hypothesis Hf : ring_homo.

  Fact ring_homo_congr x y : x ‚àº·µ£ y ‚Üí f x ‚àº·µ£ f y.
  Proof. apply Hf. Qed.

  Fact ring_homo_op_a x y : f (x +·µ£ y) ‚àº·µ£ f x +·µ£ f y.
  Proof. apply Hf. Qed.

  Fact ring_homo_op_m x y : f (x *·µ£ y) ‚àº·µ£ f x *·µ£ f y.
  Proof. apply Hf. Qed.

  Fact ring_homo_un_m : f 1·µ£ ‚àº·µ£ 1·µ£.
  Proof. apply Hf. Qed.

  Fact ring_homo_un_a : f 0·µ£ ‚àº·µ£ 0·µ£.
  Proof.
    generalize (ring_homo_op_a un_a un_a).
    rewrite ring_homo_congr with (y := 0·µ£); try ring.
    intros E.
    apply ring_op_a_cancel with (x := f 0·µ£).
    rewrite <- E; ring.
  Qed.

  Fact ring_homo_iv_a x : f (-·µ£ x) ‚àº·µ£ -·µ£ f x.
  Proof.
    apply ring_op_a_cancel with (f x).
    rewrite <- ring_homo_op_a, ring_sub_a_id with (x := f x), <- ring_homo_un_a.
    apply ring_homo_congr; ring.
  Qed.

  Fact ring_homo_sub_a x y : f (x ‚àí·µ£ y) ‚àº·µ£ (f x ‚àí·µ£ f y).
  Proof. rewrite ring_homo_op_a, ring_homo_iv_a; ring. Qed.

End ring_homo.

Arguments ring_homo {_ _}.

#[global] Add Parametric Morphism ùì° ùìö f (H : @ring_homo ùì° ùìö f) : f with signature (req) ==> (req) as ring_homo_morph.
Proof. apply H. Qed.

Fact ring_homo_id (ùì° : ring) : @ring_homo ùì° ùì° (Œª x, x).
Proof. split right; eauto. Qed.

Fact ring_homo_compose {ùì° ùì£ ùìö : ring} {f g} :
  @ring_homo ùì° ùì£ f ‚Üí @ring_homo ùì£ ùìö g ‚Üí ring_homo (Œª x, g (f x)).
Proof. intros (? & ? & ? & ?) (? & ? & ? & ?); split right; eauto. Qed.

(** The notion of ring isomorphism *)

Definition ring_isomorphism {ùì° ùì£ : ring} (f : ùì° ‚Üí ùì£) (g : ùì£ ‚Üí ùì°) :=
    ring_homo f
  ‚àß ring_homo g
  ‚àß (‚àÄp, f (g p) ‚àº·µ£ p)
  ‚àß (‚àÄp, g (f p) ‚àº·µ£ p).

Section quotient_ring.

  Variable (ùì° : ring)
           (rel : ùì° ‚Üí ùì° ‚Üí Prop)
           (rel_maj : req ‚äÜ‚ÇÇ rel) 
           (rel_equiv : Equivalence rel)
           (rel_ext : @ring_eq_ext _ op_a op_m iv_a rel).
 
  Add Ring ùì°_is_ring : (is_ring ùì°).

  Definition quotient_ring : ring.
  Proof.
    exists ùì° un_a op_a iv_a un_m op_m rel; auto.
    abstract (constructor; intros; apply rel_maj; ring).
  Defined.

  Fact quotient_homo : @ring_homo ùì° quotient_ring (Œª x, x).
  Proof. split right; ring || auto. Qed.

End quotient_ring.

Section product_ring.

  Variables (ùì° ùì£ : ring).
 
  Add Ring ùì°_is_ring : (is_ring ùì°).
  Add Ring ùì£_is_ring : (is_ring ùì£).

  Let PR := (ùì° * ùì£)%type.
  Let pun_a : PR := (0·µ£,0·µ£).
  Let pop_a (a b : PR) : PR := (fst a +·µ£ fst b,snd a +·µ£ snd b).
  Let piv_a (a : PR) : PR := (-·µ£ fst a, -·µ£ snd a).
  Let pun_m : PR := (1·µ£,1·µ£).
  Let pop_m (a b : PR) : PR := (fst a *·µ£ fst b,snd a *·µ£ snd b).
  Let prel (a b : PR) : Prop := fst a ‚àº·µ£ fst b ‚àß snd a ‚àº·µ£ snd b.

  Local Fact PR_equiv : Equivalence prel.
  Proof.
    split; unfold prel.
    + intros []; simpl; auto.
    + intros [] []; simpl; intros []; auto.
    + intros [] [] []; simpl; intros [] []; eauto.
  Qed.

  Tactic Notation "solve" "PR" :=
    repeat match goal with 
    | |- forall _ : PR, _ => intros []
    end; simpl; split; ring.

  Local Fact PR_ring : ring_theory pun_a pun_m pop_a pop_m (Œª x y : PR, pop_a x (piv_a y)) piv_a prel.
  Proof. split; unfold prel; solve PR. Qed.

  Local Fact PR_ring_ext : ring_eq_ext pop_a pop_m piv_a prel.
  Proof.
    split; unfold prel.
    1,2: intros [] [] (E1 & E2) [] [] (E3 & E4); simpl in *; rewrite E1, E2, E3, E4; split; ring.
    intros [] [] (E1 & E2); simpl in *; rewrite E1, E2; split; ring.
  Qed.

  Hint Resolve PR_equiv PR_ring PR_ring_ext : core.

  Definition product_ring : ring.
  Proof.
    exists PR pun_a pop_a piv_a pun_m pop_m prel; abstract auto.
  Defined.

End product_ring.

(** The ring of relative integers *)

Definition Z_ring : ring.
Proof.
  exists Z 0%Z Z.add Z.opp 1%Z Z.mul (@eq Z).
  + apply eq_equivalence.
  + apply Zth.
  + abstract (split; intros ? ? []; auto; intros ? ? []; auto).
Defined.



