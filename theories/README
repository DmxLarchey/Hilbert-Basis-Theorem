This archive contains the Rocq artefact for the CPP 2026 submission

    Bar Inductive Predicates for Constructive Algebra in Rocq
    
The code was written to be compiled and reviewed using Rocq-9.0.0.
Below are instructions to help the reviewer, if needed. 

Before reviewing the code, you should install Rocq-9.0.0. 
We suggest using the opam tool for this task and detail this
procedure below, as a last resort in case you do not have
other means to install Rocq. 

You can visit https://github.com/rocq-prover/opam 
for information about Rocq & opam. We suggest registering
the "released" repo, the recommended default.

The following tested sequence of commands will create a new opam 
switch named "review104", then register the "released" repo, and 
then install vanilla Rocq 9.0.0 with Stdlib and RocqIDE. 
It is enough for the review, no external libraries are needed:

# opam switch create review104 ocaml-base-compiler.4.14.1 --jobs=16
# eval $(opam env --switch=review104)
# opam repo add rocq-released https://rocq-prover.org/opam/released
# opam update
# opam install rocq-stdlib.9.0.0 rocqide.9.0.0 --jobs=16

The first and last command may take some time to complete.

Once Rocq-9.0.0 is installed, unpack the archive and, in a terminal, 
from the main directory of the archive, compile the whole project with

# mkdir review104
# cd review104
# tar zxvf [...]/cpp2026_104.tar.gz
# make all

This should run and complete in less than 15 seconds. Some of the main 
results are purposely displayed while they are compiled by Rocq.
After the code is compiled, you can review the individual files 
using your favorite Rocq visual editor, possibly RocqIDE as a
fallback. The following commands invokes RocqIDE:

# rocqide hbt.v

Some of the *.v files below are heavily commented.

This is a summary of the contents of the files in the archive:

README:                this file
LICENSE:               MPL v2.0

_CoqProject:           lists the *.v Rocq source code files          
Makefile:              use _CoqProject to manage the Rocq compilation process
 
utils.v:               utilities and basic notations
measure.v:             tools for induction on a measure
php.v:                 tailored instance of the finite pigeon hole principle

bar.v:                 bar inductive predicates in general

ring.v:                the definition of (non-discrete) rings

ideal.v:               definition and tools for finitely generated ring ideals

monotone_closure.v:    monotone closure of a relation

noetherian_nc.v:       why does the classical characterization of
                       Noetherian rings fail constructively

bezout.v:              Bezout rings, among which Z, the ring of integers
                     
noetherian.v:          definition of (Bar) Noetherian rings and
                       Z is a (Bar) Noetherian ring
                     
product.v:             construction of the direct product of two rings

product_noetherian.v:  the direct product preserves Noetherian rings
                     
poly.v:                construction of the polynomial ring R[X] for a ring R
                     
category.v:            categorical characterizations of product rings,
                       polynomial rings, and multivariate polynomial rings

hbt.v:                 the Hilbert Basis Theorem

noetherian_wf.v:       well-founded induction principles for Noetherian rings

noetherian_alt.v:      comparison with alternate constructive characterizations
                       of RS- and ML-Noetherian rings
   
ramsey.v:              reworked proof that the direct product of two WQOs
                       is a WQO (for the record)

