(**************************************************************)
(*   Copyright Dominique Larchey-Wendling [*]                 *)
(*                                                            *)
(*                             [*] Affiliation LORIA -- CNRS  *)
(**************************************************************)
(*      This file is distributed under the terms of the       *)
(*        Mozilla Public License Version 2.0, MPL-2.0         *)
(**************************************************************)

From Stdlib Require Import List Ring Setoid Utf8.

Require Import utils ring.

Import ListNotations.

Set Implicit Arguments.

(** The definition of an ideal in a ring *)

Section ring_ideal.

  Variables (𝓡 : ring).

  Implicit Types (𝓘 𝓙 : 𝓡 → Prop).

  Add Ring 𝓡_is_ring : (is_ring 𝓡).

  Definition ring_ideal 𝓘 :=
      (∀ x y, x ∼ᵣ y → 𝓘 x → 𝓘 y)
    ∧ 𝓘 0ᵣ
    ∧ (∀ x y, 𝓘 x → 𝓘 y → 𝓘 (x +ᵣ y))
    ∧ (∀ x y, 𝓘 y → 𝓘 (x *ᵣ y)).

  Fact ring_ideal_equiv 𝓘 𝓙 : 𝓘 ≡₁ 𝓙 → ring_ideal 𝓘 → ring_ideal 𝓙.
  Proof.
    intros E (H1 & H2 & H3 & H4); split right.
    2: now apply E.
    all: intros ? ?; rewrite <- !E; eauto.
  Qed.

  Variables (𝓘 : _ ) (H𝓘 : ring_ideal 𝓘).

  Fact ring_ideal_eq x y : x ∼ᵣ y → 𝓘 x → 𝓘 y.
  Proof. apply H𝓘 . Qed.

  Fact ring_ideal_op_a : ∀ x y, 𝓘 x → 𝓘 y → 𝓘 (x +ᵣ y).
  Proof. apply H𝓘. Qed.

  Fact ring_ideal_iv_a x : 𝓘 x → 𝓘 (-ᵣ x).
  Proof.
    intros Hx.
    apply (proj1 H𝓘) with ((-ᵣ 1ᵣ) *ᵣ x); [ ring | ].
    now apply H𝓘.
  Qed.

  Hint Resolve ring_ideal_iv_a : core.

  Fact ring_ideal_sub_a x y : 𝓘 x → 𝓘 y → 𝓘 (x −ᵣ y).
  Proof. intros; apply H𝓘; auto. Qed.

End ring_ideal.

Arguments ring_ideal {_}.

(** idl P is the ideal generated by P, ie the smallest ideal containing P *)
Inductive idl {𝓡 : ring} (P : 𝓡 → Prop) : 𝓡 → Prop :=
  | idl_stop x    : P x → idl P x
  | idl_req x y   : x ∼ᵣ y → idl P x → idl P y 
  | idl_un        : idl P 0ᵣ
  | idl_add x y   : idl P x → idl P y → idl P (x +ᵣ y)
  | idl_scal a x  : idl P x → idl P (a *ᵣ x).

#[global] Hint Constructors idl : core.

Add Parametric Morphism (𝓡 : ring) (P : 𝓡 → Prop): (idl P) with signature (req) ==> (iff) as idl_morph.
Proof. intros ? ? E; split; apply (@idl_req _ P); now rewrite E. Qed.

(** An alternate definition for finitely generated ideals using l(inear) c(ombinations) 

    lc l x means (inductively) that x can be obtained as a linear combination of the members of l *)

Inductive lc {𝓡 : ring} : list 𝓡 → 𝓡 → Prop :=
  | lc_nil  x : 0ᵣ ∼ᵣ x → lc [] x
  | lc_cons a x l z y : a *ᵣ x +ᵣ z ∼ᵣ y → lc l z → lc (x::l) y.

#[global] Hint Constructors lc : core.

Fact lc_req_closed (𝓡 : ring) (l : list 𝓡) x y : x ∼ᵣ y → lc l x → lc l y.
Proof.
  intros H1 H2; revert H2 y H1.
  induction 1 as [ x E | a x l r y E H IH ]; intros z H1.
  + constructor 1; now rewrite E.
  + constructor 2 with a r; auto.
    now rewrite <- H1.
Qed.

Add Parametric Morphism (𝓡 : ring) (l : list 𝓡) : (lc l) with signature (req) ==> (iff) as lc_equiv.
Proof. intros ? ? E; split; apply lc_req_closed; now rewrite E. Qed.

Section ring_ideal.

  Variable (𝓡 : ring).

  Implicit Type (x : 𝓡) (l : list 𝓡) (P Q 𝓘 𝓙 : 𝓡 → Prop).

  Add Ring 𝓡_is_ring : (is_ring 𝓡).

  Fact idl_ring_ideal P : ring_ideal (idl P).
  Proof. split right; eauto. Qed.

  Hint Resolve idl_ring_ideal : core.

  Fact idl_op_a P x y : idl P x → idl P y → idl P (x +ᵣ y).
  Proof. now constructor 4. Qed.

  Fact idl_iv_a P x : idl P x → idl P (-ᵣ x).
  Proof. apply ring_ideal_iv_a; auto. Qed.

  Hint Resolve idl_op_a idl_iv_a : core.

  Fact idl_sub_a P x y : idl P x → idl P y → idl P (x −ᵣ y).
  Proof. auto. Qed.

  Fact idl_substract P x y : idl P x → idl P (y −ᵣ x) → idl P y.
  Proof. intros H1 H2; apply idl_req with (2 := idl_op_a H1 H2); ring. Qed.

  (** idl P is the smallest ideal containing P *)
  Fact idl_smallest P : ∀𝓘, ring_ideal 𝓘 → P ⊆₁ 𝓘 → idl P ⊆₁ 𝓘.
  Proof. intros ? (? & ? & ? & ?) ?; induction 1; eauto. Qed.

  Fact idl_mono P Q : P ⊆₁ Q → idl P ⊆₁ idl Q.
  Proof. intro; apply idl_smallest; auto. Qed.

  Hint Resolve idl_mono : core.
  
  Fact idl_idem P : idl (idl P) ⊆₁ idl P.
  Proof. apply idl_smallest; auto. Qed.

  Fact idl_closed P Q : P ⊆₁ idl Q → idl P ⊆₁ idl Q.
  Proof. apply idl_smallest, idl_ring_ideal. Qed.
  
  #[local] Hint Resolve in_eq in_cons : core.

  Fact idl_stable x l : idl ⌞l⌟ x ↔ idl ⌞x::l⌟ ⊆₁ idl ⌞l⌟.
  Proof.
    split.
    + intros ?; apply idl_closed; auto.
      intros ? [ <- | ]; eauto.
    + intros H; apply H; eauto.
  Qed.

  (** Another characterization of idl ⌞l⌟ *)

  Fact lc__idl l x : lc l x → idl ⌞l⌟ x.
  Proof.
    induction 1 as [ | a x l r y E _ IH ]; eauto.
    constructor 2 with (1 := E).
    apply idl_op_a; eauto.
    revert IH; apply idl_mono; eauto.
  Qed.

  Fact lc_inv l z :
      lc l z
    → match l with
      | nil  => 0ᵣ ∼ᵣ z
      | x::l => ∃ a y, lc l y ∧ a *ᵣ x +ᵣ y ∼ᵣ z
      end.
  Proof. destruct 1; eauto. Qed.

  Fact lc_inv_1 x z : lc [x] z ↔ ∃ a, a *ᵣ x ∼ᵣ z.
  Proof.
     split.
     + intros (u & v & E%lc_inv & F)%lc_inv.
       exists u; rewrite <- F, <- E; ring.
     + intros (a & <-).
       constructor 2 with a un_a; try ring.
       constructor; auto.
  Qed.

  Fact lc_inv_2 x y z : lc [x;y] z ↔ ∃ a b, a *ᵣ x +ᵣ b *ᵣ y ∼ᵣ z.
  Proof.
     split.
     + intros (u & v & (a & E)%lc_inv_1 & F)%lc_inv.
       exists u, a; rewrite <- F, <- E; ring.
     + intros (a & b & <-).
       constructor 2 with a (op_m b y); try ring.
       constructor 2 with b un_a; try ring.
       constructor; auto.
  Qed.

  Fact lc_un_a l : lc l 0ᵣ.
  Proof.
    induction l as [ | x l IHl ].
    + constructor 1; reflexivity.
    + constructor 2 with (a := (op_m un_a x)) (x := x) (z := un_a); auto || ring.
  Qed.

  Hint Resolve lc_un_a : core.

  Fact lc_op_a l x y : lc l x → lc l y → lc l (x +ᵣ y).
  Proof.
    induction 1 as [ x E | a x l r z E H IH ] in y |- *.
    + intros F%lc_inv.
      rewrite <- E, <- F.
      constructor 1; ring.
    + intros (a' & r' & ? & <-)%lc_inv.
      constructor 2 with (a := op_a a a') (z := op_a r r'); auto.
      rewrite <- E; ring.
  Qed.

  Fact lc_iv_a l x : lc l x → lc l (iv_a x).
  Proof.
    induction 1 as [ x E | a x l r z E H IH ].
    + constructor 1.
      rewrite <- E; ring.
    + constructor 2 with (a := iv_a a) (z := iv_a r); auto.
      rewrite <- E; ring.
  Qed.

  Fact lc_op_m l a x : lc l x → lc l (a *ᵣ x).
  Proof.
    induction 1 as [ x E | b x l r z E H IH ].
    + constructor 1.
      rewrite <- E; ring.
    + constructor 2 with (a := op_m a b) (z := op_m a r); auto.
      rewrite <- E; ring.
  Qed.

  Fact lc_incr l x : x ∈ l → lc l x.
  Proof.
    revert x; induction l as [ | y l IHl ]; intros x []; subst.
    + constructor 2 with (a := un_m) (z := un_a); auto; ring.
    + apply IHl in H.
      constructor 2 with (a := un_a) (z := x); auto; ring.
  Qed.

  Theorem idl__lc l x : idl ⌞l⌟ x → lc l x.
  Proof.
    induction 1 as [ x E | x y E | | x y H1 IH1 H2 IH2 | a x H IH ]; auto.
    + now apply lc_incr.
    + now rewrite <- E.
    + now apply lc_op_a.
    + now apply lc_op_m.
  Qed.

  (** We have two equivalent definition of the ideal generated
      by a list l,
      + idl ⌞l⌟ x: by induction on the structure of x
      + lc l x: by induction on l
    *)

  Theorem idl_iff_lc__list l : idl ⌞l⌟ ≡₁ lc l.
  Proof.
    split.
    + apply idl__lc.
    + apply lc__idl.
  Qed.

  Hint Resolve in_or_app lc_op_m : core.

  (** More generally, the idl P is the union of lc l for ⌞l⌟ ⊆₁ P *)
  Theorem idl_iff_lc P x : idl P x ↔ ∃l, lc l x ∧ ⌞l⌟ ⊆₁ P.
  Proof.
    split.
    + revert x; apply idl_smallest; [ split right | ].
      * intros x y E (l & H1 & H2); exists l.
        rewrite <- E; auto.
      * exists []; simpl; split; auto; tauto.
      * intros x y (l & H1 & H2) (m & H3 & H4).
        exists (l++m); split.
        - apply idl_iff_lc__list in H1, H3.
          apply idl_iff_lc__list.
          constructor 4.
          ++ revert H1; apply idl_mono; eauto.
          ++ revert H3; apply idl_mono; eauto.
        - intros ? []%in_app_iff; eauto.
      * intros ? ? (l & []); exists l; eauto.
      * intros x ?; exists [x]; split; eauto.
        - apply idl_iff_lc__list; constructor 1; eauto.
        - intros ? [ <- | [] ]; auto.
    + intros (l & H1%idl_iff_lc__list & H2).
      revert H1; now apply idl_mono.
  Qed.

  Lemma idl_compact P l : ⌞l⌟ ⊆₁ idl P → ∃m, ⌞m⌟ ⊆₁ P ∧ ⌞l⌟ ⊆₁ idl ⌞m⌟.
  Proof.
    induction l as [ | x l IHl ].
    + exists []; split; now simpl.
    + intros H.
      cut (idl P x); eauto.
      intros (lx & H1 & H2)%idl_iff_lc.
      destruct IHl as (ll & H3 & H4); eauto.
      exists (lx++ll); split.
      * intros ? []%in_app_iff; auto.
      * intros y  [ <- | Hy%H4 ].
        - apply idl_iff_lc; eauto.
        - revert Hy; apply idl_mono.
          intro; rewrite in_app_iff; auto.
  Qed.

  Inductive update : list 𝓡 → list 𝓡 → Prop :=
    | update_chng l x y : lc l (y −ᵣ x) → update (x::l) (y::l)
    | update_skip x l m : update l m → update (x::l) (x::m).

  Hint Constructors update : core.

  Remark update_sym l m : update l m → update m l.
  Proof.
    induction 1 as [ l x y H%idl_iff_lc__list%idl_iv_a | ]; auto.
    constructor; apply idl_iff_lc__list.
    revert H; apply idl_req; ring.
  Qed.

  Lemma idl_update_closed l m x : update l m → idl ⌞l⌟ x → idl ⌞m⌟ x.
  Proof.
    rewrite !idl_iff_lc__list.
    intros H1; revert H1 x.
    induction 1 as [ l x y H1 | x l m _ IH ];
      intros u (a & z & H3 & <-)%lc_inv;
      rewrite <- idl_iff_lc__list in *.
    + apply idl_op_a.
      2: revert H3; apply idl_mono; auto.
      apply idl_scal.
      apply idl_req with (y −ᵣ (y −ᵣ x)); try ring.
      apply idl_sub_a; auto.
      revert H1; apply idl_mono; auto.
    + apply idl_op_a.
      * apply idl_scal; constructor 1; now left.
      * apply idl_iff_lc__list, IH, idl_iff_lc__list in H3.
        revert H3; apply idl_mono; auto.
  Qed.

  Hint Resolve update_sym idl_update_closed : core.

  Remark idl_update_invariant l m : update l m → idl ⌞l⌟ ≡₁ idl ⌞m⌟.
  Proof. split; eauto. Qed.

End ring_ideal.

Arguments ring_ideal {_}.
Arguments update {_}.

Definition ring_sub_homo {𝓡 𝓣 : ring} (f : 𝓡 → 𝓣) :=
   (∀ x y, x ∼ᵣ y → f x ∼ᵣ f y)
 ∧ (∀ x y, f (x +ᵣ y) ∼ᵣ f x +ᵣ f y)
 ∧ (∀ x y, f (x *ᵣ y) ∼ᵣ f x *ᵣ f y)
 ∧ (f 0ᵣ ∼ᵣ 0ᵣ).

(** idl P x → idl (f P) (f x) for f ring sub-homomorphism (does not nec. preserve 1ᵣ) *)
Fact idl_sub_homo (𝓡 𝓣 : ring) (f : 𝓡 → 𝓣) :
    ring_sub_homo f
  → ∀ (P : 𝓡 → Prop) x, idl P x → idl (λ y, ∃x, y = f x ∧ P x) (f x).
Proof. intros (? & ? & []); induction 1; eauto. Qed.
